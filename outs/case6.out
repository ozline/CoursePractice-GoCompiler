设置 REDUCE 发生冲突! 状态: 93 展望符: 'else'


===============开始解析===============

=====================================
第 1 步
状态栈: [0]
符号栈: [$]
当前状态: 0, 当前符号: { 转换后: {
动作类别: shift 期望下一步状态: 3
执行移入操作


=====================================
第 2 步
状态栈: [0 3]
符号栈: [$ {]
当前状态: 3, 当前符号: float 转换后: basic
动作类别: reduce 期望下一步状态: 3
使用产生式 decls -> [] 规约
转移状态到 4


=====================================
第 3 步
状态栈: [0 3 4]
符号栈: [$ { decls]
当前状态: 4, 当前符号: float 转换后: basic
动作类别: shift 期望下一步状态: 9
执行移入操作


=====================================
第 4 步
状态栈: [0 3 4 9]
符号栈: [$ { decls float]
当前状态: 9, 当前符号: [ 转换后: [
动作类别: reduce 期望下一步状态: 7
使用产生式 type -> [basic] 规约
[符号表] 触发类型定义，该类型为 float
转移状态到 7


=====================================
第 5 步
状态栈: [0 3 4 7]
符号栈: [$ { decls type]
当前状态: 7, 当前符号: [ 转换后: [
动作类别: shift 期望下一步状态: 22
执行移入操作


=====================================
第 6 步
状态栈: [0 3 4 7 22]
符号栈: [$ { decls type []
当前状态: 22, 当前符号: 100 转换后: num
动作类别: shift 期望下一步状态: 31
执行移入操作


=====================================
第 7 步
状态栈: [0 3 4 7 22 31]
符号栈: [$ { decls type [ 100]
当前状态: 31, 当前符号: ] 转换后: ]
动作类别: shift 期望下一步状态: 39
执行移入操作


=====================================
第 8 步
状态栈: [0 3 4 7 22 31 39]
符号栈: [$ { decls type [ 100 ]]
当前状态: 39, 当前符号: series 转换后: id
动作类别: reduce 期望下一步状态: 6
使用产生式 type_array -> [type [ num ]] 规约
[符号表] 触发数组类型定义， 数组大小为 100
转移状态到 8


=====================================
第 9 步
状态栈: [0 3 4 8]
符号栈: [$ { decls type_array]
当前状态: 8, 当前符号: series 转换后: id
动作类别: reduce 期望下一步状态: 5
使用产生式 type -> [type_array] 规约
转移状态到 7


=====================================
第 10 步
状态栈: [0 3 4 7]
符号栈: [$ { decls type]
当前状态: 7, 当前符号: series 转换后: id
动作类别: shift 期望下一步状态: 21
执行移入操作


=====================================
第 11 步
状态栈: [0 3 4 7 21]
符号栈: [$ { decls type series]
当前状态: 21, 当前符号: ; 转换后: ;
动作类别: shift 期望下一步状态: 30
执行移入操作


=====================================
第 12 步
状态栈: [0 3 4 7 21 30]
符号栈: [$ { decls type series ;]
当前状态: 30, 当前符号: bool 转换后: basic
动作类别: reduce 期望下一步状态: 4
使用产生式 decl -> [type id ;] 规约
[符号表] 定义变量 series 类型为 float size:100
转移状态到 6


=====================================
第 13 步
状态栈: [0 3 4 6]
符号栈: [$ { decls decl]
当前状态: 6, 当前符号: bool 转换后: basic
动作类别: reduce 期望下一步状态: 2
使用产生式 decls -> [decls decl] 规约
转移状态到 4


=====================================
第 14 步
状态栈: [0 3 4]
符号栈: [$ { decls]
当前状态: 4, 当前符号: bool 转换后: basic
动作类别: shift 期望下一步状态: 9
执行移入操作


=====================================
第 15 步
状态栈: [0 3 4 9]
符号栈: [$ { decls bool]
当前状态: 9, 当前符号: flag 转换后: id
动作类别: reduce 期望下一步状态: 7
使用产生式 type -> [basic] 规约
[符号表] 触发类型定义，该类型为 bool
转移状态到 7


=====================================
第 16 步
状态栈: [0 3 4 7]
符号栈: [$ { decls type]
当前状态: 7, 当前符号: flag 转换后: id
动作类别: shift 期望下一步状态: 21
执行移入操作


=====================================
第 17 步
状态栈: [0 3 4 7 21]
符号栈: [$ { decls type flag]
当前状态: 21, 当前符号: ; 转换后: ;
动作类别: shift 期望下一步状态: 30
执行移入操作


=====================================
第 18 步
状态栈: [0 3 4 7 21 30]
符号栈: [$ { decls type flag ;]
当前状态: 30, 当前符号: int 转换后: basic
动作类别: reduce 期望下一步状态: 4
使用产生式 decl -> [type id ;] 规约
[符号表] 定义变量 flag 类型为 bool size:4
转移状态到 6


=====================================
第 19 步
状态栈: [0 3 4 6]
符号栈: [$ { decls decl]
当前状态: 6, 当前符号: int 转换后: basic
动作类别: reduce 期望下一步状态: 2
使用产生式 decls -> [decls decl] 规约
转移状态到 4


=====================================
第 20 步
状态栈: [0 3 4]
符号栈: [$ { decls]
当前状态: 4, 当前符号: int 转换后: basic
动作类别: shift 期望下一步状态: 9
执行移入操作


=====================================
第 21 步
状态栈: [0 3 4 9]
符号栈: [$ { decls int]
当前状态: 9, 当前符号: index 转换后: id
动作类别: reduce 期望下一步状态: 7
使用产生式 type -> [basic] 规约
[符号表] 触发类型定义，该类型为 int
转移状态到 7


=====================================
第 22 步
状态栈: [0 3 4 7]
符号栈: [$ { decls type]
当前状态: 7, 当前符号: index 转换后: id
动作类别: shift 期望下一步状态: 21
执行移入操作


=====================================
第 23 步
状态栈: [0 3 4 7 21]
符号栈: [$ { decls type index]
当前状态: 21, 当前符号: ; 转换后: ;
动作类别: shift 期望下一步状态: 30
执行移入操作


=====================================
第 24 步
状态栈: [0 3 4 7 21 30]
符号栈: [$ { decls type index ;]
当前状态: 30, 当前符号: index 转换后: id
动作类别: reduce 期望下一步状态: 4
使用产生式 decl -> [type id ;] 规约
[符号表] 定义变量 index 类型为 int size:4
转移状态到 6


=====================================
第 25 步
状态栈: [0 3 4 6]
符号栈: [$ { decls decl]
当前状态: 6, 当前符号: index 转换后: id
动作类别: reduce 期望下一步状态: 2
使用产生式 decls -> [decls decl] 规约
转移状态到 4


=====================================
第 26 步
状态栈: [0 3 4]
符号栈: [$ { decls]
当前状态: 4, 当前符号: index 转换后: id
动作类别: reduce 期望下一步状态: 9
使用产生式 stmts -> [] 规约
转移状态到 5


=====================================
第 27 步
状态栈: [0 3 4 5]
符号栈: [$ { decls stmts]
当前状态: 5, 当前符号: index 转换后: id
动作类别: shift 期望下一步状态: 13
执行移入操作


=====================================
第 28 步
状态栈: [0 3 4 5 13]
符号栈: [$ { decls stmts index]
当前状态: 13, 当前符号: = 转换后: =
动作类别: reduce 期望下一步状态: 20
使用产生式 loc -> [id] 规约
[符号表] 触发变量 index 赋值
转移状态到 15


=====================================
第 29 步
状态栈: [0 3 4 5 15]
符号栈: [$ { decls stmts loc]
当前状态: 15, 当前符号: = 转换后: =
动作类别: shift 期望下一步状态: 25
执行移入操作


=====================================
第 30 步
状态栈: [0 3 4 5 15 25]
符号栈: [$ { decls stmts loc =]
当前状态: 25, 当前符号: 0 转换后: num
动作类别: shift 期望下一步状态: 34
执行移入操作


=====================================
第 31 步
状态栈: [0 3 4 5 15 25 34]
符号栈: [$ { decls stmts loc = 0]
当前状态: 34, 当前符号: ; 转换后: ;
动作类别: shift 期望下一步状态: 42
执行移入操作


=====================================
第 32 步
状态栈: [0 3 4 5 15 25 34 42]
符号栈: [$ { decls stmts loc = 0 ;]
当前状态: 42, 当前符号: series 转换后: id
动作类别: reduce 期望下一步状态: 11
使用产生式 stmt -> [loc = num ;] 规约
[符号表] 将变量 index 赋值为 0
转移状态到 14


=====================================
第 33 步
状态栈: [0 3 4 5 14]
符号栈: [$ { decls stmts stmt]
当前状态: 14, 当前符号: series 转换后: id
动作类别: reduce 期望下一步状态: 8
使用产生式 stmts -> [stmts stmt] 规约
转移状态到 5


=====================================
第 34 步
状态栈: [0 3 4 5]
符号栈: [$ { decls stmts]
当前状态: 5, 当前符号: series 转换后: id
动作类别: shift 期望下一步状态: 13
执行移入操作


=====================================
第 35 步
状态栈: [0 3 4 5 13]
符号栈: [$ { decls stmts series]
当前状态: 13, 当前符号: [ 转换后: [
动作类别: reduce 期望下一步状态: 20
使用产生式 loc -> [id] 规约
[符号表] 触发变量 series 赋值
转移状态到 15


=====================================
第 36 步
状态栈: [0 3 4 5 15]
符号栈: [$ { decls stmts loc]
当前状态: 15, 当前符号: [ 转换后: [
动作类别: shift 期望下一步状态: 24
执行移入操作


=====================================
第 37 步
状态栈: [0 3 4 5 15 24]
符号栈: [$ { decls stmts loc []
当前状态: 24, 当前符号: index 转换后: id
解析错误：无法找到状态 24 和符号 id 的动作


===============三地址码===============
0: index = 0


===============符号表===============
名称: series, 类型: ARRAY, 作用域: 1 地址: t469
名称: flag, 类型: ARRAY, 作用域: 1 地址: t161
名称: index, 类型: ARRAY, 作用域: 1 地址: t704
